name: CI

on:
  push:
    branches: [master, dev]
  pull_request:
    branches: [master, dev]

# Cancel in-progress runs for the same workflow and branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.23', '1.24', '1.25']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ matrix.go-version }}
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Verify dependencies
      run: go mod verify
      
    - name: Run go vet
      run: go vet ./...
      
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi
        
    - name: Run unit tests - Datastore
      run: go test -v -race -coverprofile=coverage-datastore.out ./internal/datastore
      
    - name: Run unit tests - Persistence
      run: go test -v -race -coverprofile=coverage-persistence.out ./internal/persistence
      
    - name: Run integration tests - API
      run: go test -v -race -coverprofile=coverage-api.out ./internal/api
      
    - name: Run all other tests
      run: |
        # Run tests for all other packages
        go test -v -race -coverprofile=coverage-other.out $(go list ./... | grep -v -E "(internal/datastore|internal/persistence|internal/api)")
        
    - name: Merge coverage profiles
      run: |
        echo "mode: atomic" > coverage.out
        tail -n +2 coverage-datastore.out >> coverage.out || true
        tail -n +2 coverage-persistence.out >> coverage.out || true
        tail -n +2 coverage-api.out >> coverage.out || true
        tail -n +2 coverage-other.out >> coverage.out || true
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.23'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23-
          
    - name: Build application
      run: go build -v -o syncopate-db ./cmd/main.go
      
    - name: Test build executable
      run: |
        ./syncopate-db --help || echo "Help command executed"
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: syncopate-db-${{ github.sha }}
        path: syncopate-db
        retention-days: 7

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.23'
        
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m
        
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.23'
        
    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: ./...
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: results.sarif

  examples:
    name: Test Examples
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.23'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23-
          
    - name: Test Basic In-Memory Example
      run: |
        cd examples/basic_in_memory
        timeout 10s go run main.go || echo "Example completed or timed out"
        
    - name: Test Persistent Database Example
      run: |
        cd examples/persistent_database
        timeout 10s go run main.go || echo "Example completed or timed out"
        
    - name: Test Advanced Querying Example
      run: |
        cd examples/advanced_querying
        timeout 15s go run main.go || echo "Example completed or timed out"
        
    - name: Test Complete Application Example
      run: |
        cd examples/complete_application
        timeout 20s go run main.go || echo "Example completed or timed out"

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.23'
        
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-1.23-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-1.23-
          
    - name: Run benchmark tests
      run: |
        go test -bench=. -benchmem -run=^$ ./internal/datastore > benchmark-results.txt || true
        go test -bench=. -benchmem -run=^$ ./internal/persistence >> benchmark-results.txt || true
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ github.sha }}
        path: benchmark-results.txt
        retention-days: 7

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        if [ -f "docker/Dockerfile" ]; then
          docker build -f docker/Dockerfile -t syncopate-db:${{ github.sha }} .
        else
          echo "Dockerfile not found, skipping Docker build"
        fi

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, build, lint, security, examples]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.test.result == 'success' && needs.build.result == 'success' && needs.lint.result == 'success' }}
      run: |
        echo "✅ All CI checks passed successfully!"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Lint: ${{ needs.lint.result }}"
        echo "- Security: ${{ needs.security.result }}"
        echo "- Examples: ${{ needs.examples.result }}"
        
    - name: Notify failure
      if: ${{ needs.test.result == 'failure' || needs.build.result == 'failure' || needs.lint.result == 'failure' }}
      run: |
        echo "❌ CI checks failed!"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Build: ${{ needs.build.result }}"
        echo "- Lint: ${{ needs.lint.result }}"
        echo "- Security: ${{ needs.security.result }}"
        echo "- Examples: ${{ needs.examples.result }}"
        exit 1
